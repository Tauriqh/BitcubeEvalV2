#pragma checksum "C:\Users\tauri\source\repos\BitcubeEval\BitcubeEvalV2\BitcubeEval\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "bde75c7a6a4fec00b75bc65aba14709fa7671a41"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(BitcubeEval.Pages.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
namespace BitcubeEval.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\tauri\source\repos\BitcubeEval\BitcubeEvalV2\BitcubeEval\Pages\_ViewImports.cshtml"
using BitcubeEval;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"bde75c7a6a4fec00b75bc65aba14709fa7671a41", @"/Pages/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"be8fd3f5d1e99f24970c8e06bc45e764f62a364e", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\Users\tauri\source\repos\BitcubeEval\BitcubeEvalV2\BitcubeEval\Pages\Index.cshtml"
  
    ViewData["Title"] = "Home page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
    <div>
        <div style=""background-color:#e0e0e0;"" class=""jumbotron text-center"">
            <h1 class=""display-4"">Welcome</h1>
        </div>
        <h3>Assessment Project - Section 1</h3>
        <h5>Section Specifications:</h5>
        <p>
            Use any environment / language you're comfortable with (preferable C#) to develop a web application that provides the following functionality:
            <br />
            Create a registration page that allows users to register to use the website. When a user registers, the following criteria should be met:
        </p>
        <ul>
            <li>Email address must be unique</li>
            <li>User must supply at least their first name and last name</li>
            <li>Password must have at least 1 uppercase character, 1 lowercase character, 1 special character,1 number and must be at least 6 characters long</li>
            <li>Password must be encrypted before being saved</li>
        </ul>
        <h3>Assessment Project -");
            WriteLiteral(@" Section 2</h3>
        <h5>Section Specifications:</h5>
        <p>Create a login page, where a user can log in using their email address and password.</p>
        <ul>
            <li>There should be an option for the user to tell the site to remember their email address, so they don’t have to complete it every time they want to log in.</li>
            <li>Once a user successfully logs in, they should be directed to the profile page.</li>
        </ul>
        <h3>Assessment Project - Section 3</h3>
        <h5>Section Specifications:</h5>
        <p>Each page that a user sees once they have been validated should have navigation buttons with the following buttons:</p>
        <ul>
            <li>Profile – redirects to the profile page.</li>
            <li>Friends – redirects to the friends page.</li>
            <li>Logout – Should abandon the user’s current session and redirect them to the login page.</li>
        </ul>
        <h3>Assessment Project - Section 4</h3>
        <h5>Section ");
            WriteLiteral(@"Specifications:</h5>
        <p>Profile page:</p>
        <ul>
            <li>Displays the information that a user completed when they registered, except for their password.</li>
            <li>Should provide an edit function, that allows the user to update the information they provided when they registered, except for password.</li>
            <li>Should provide a change password function, that allows a user to change their password, after providing their current password again.</li>
        </ul>
        <h3>Assessment Project - Section 5</h3>
        <h5>Section Specifications:</h5>
        <p> Friends page:</p>
        <ul>
            <li>Displays all of the users that the currently logged in user has listed as friends.</li>
            <li>The logged in user should be able to send friends requests to other users that have been registered.</li>
            <li>The logged in user should be able to accept/decline friends requests from other users.</li>
        </ul>
    </div>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel>)PageContext?.ViewData;
        public IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
